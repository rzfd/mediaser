// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/donation.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DonationService_CreateDonation_FullMethodName         = "/donation.DonationService/CreateDonation"
	DonationService_GetDonation_FullMethodName            = "/donation.DonationService/GetDonation"
	DonationService_GetDonationsByStreamer_FullMethodName = "/donation.DonationService/GetDonationsByStreamer"
	DonationService_UpdateDonationStatus_FullMethodName   = "/donation.DonationService/UpdateDonationStatus"
	DonationService_StreamDonationEvents_FullMethodName   = "/donation.DonationService/StreamDonationEvents"
	DonationService_GetDonationStats_FullMethodName       = "/donation.DonationService/GetDonationStats"
)

// DonationServiceClient is the client API for DonationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Donation service definition
type DonationServiceClient interface {
	// Create a new donation
	CreateDonation(ctx context.Context, in *CreateDonationRequest, opts ...grpc.CallOption) (*CreateDonationResponse, error)
	// Get donation by ID
	GetDonation(ctx context.Context, in *GetDonationRequest, opts ...grpc.CallOption) (*GetDonationResponse, error)
	// Get donations by streamer
	GetDonationsByStreamer(ctx context.Context, in *GetDonationsByStreamerRequest, opts ...grpc.CallOption) (*GetDonationsListResponse, error)
	// Update donation status
	UpdateDonationStatus(ctx context.Context, in *UpdateDonationStatusRequest, opts ...grpc.CallOption) (*UpdateDonationStatusResponse, error)
	// Stream donation events (real-time notifications)
	StreamDonationEvents(ctx context.Context, in *StreamDonationEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DonationEvent], error)
	// Get donation statistics
	GetDonationStats(ctx context.Context, in *GetDonationStatsRequest, opts ...grpc.CallOption) (*GetDonationStatsResponse, error)
}

type donationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDonationServiceClient(cc grpc.ClientConnInterface) DonationServiceClient {
	return &donationServiceClient{cc}
}

func (c *donationServiceClient) CreateDonation(ctx context.Context, in *CreateDonationRequest, opts ...grpc.CallOption) (*CreateDonationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDonationResponse)
	err := c.cc.Invoke(ctx, DonationService_CreateDonation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donationServiceClient) GetDonation(ctx context.Context, in *GetDonationRequest, opts ...grpc.CallOption) (*GetDonationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDonationResponse)
	err := c.cc.Invoke(ctx, DonationService_GetDonation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donationServiceClient) GetDonationsByStreamer(ctx context.Context, in *GetDonationsByStreamerRequest, opts ...grpc.CallOption) (*GetDonationsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDonationsListResponse)
	err := c.cc.Invoke(ctx, DonationService_GetDonationsByStreamer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donationServiceClient) UpdateDonationStatus(ctx context.Context, in *UpdateDonationStatusRequest, opts ...grpc.CallOption) (*UpdateDonationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDonationStatusResponse)
	err := c.cc.Invoke(ctx, DonationService_UpdateDonationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donationServiceClient) StreamDonationEvents(ctx context.Context, in *StreamDonationEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DonationEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DonationService_ServiceDesc.Streams[0], DonationService_StreamDonationEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamDonationEventsRequest, DonationEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DonationService_StreamDonationEventsClient = grpc.ServerStreamingClient[DonationEvent]

func (c *donationServiceClient) GetDonationStats(ctx context.Context, in *GetDonationStatsRequest, opts ...grpc.CallOption) (*GetDonationStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDonationStatsResponse)
	err := c.cc.Invoke(ctx, DonationService_GetDonationStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DonationServiceServer is the server API for DonationService service.
// All implementations must embed UnimplementedDonationServiceServer
// for forward compatibility.
//
// Donation service definition
type DonationServiceServer interface {
	// Create a new donation
	CreateDonation(context.Context, *CreateDonationRequest) (*CreateDonationResponse, error)
	// Get donation by ID
	GetDonation(context.Context, *GetDonationRequest) (*GetDonationResponse, error)
	// Get donations by streamer
	GetDonationsByStreamer(context.Context, *GetDonationsByStreamerRequest) (*GetDonationsListResponse, error)
	// Update donation status
	UpdateDonationStatus(context.Context, *UpdateDonationStatusRequest) (*UpdateDonationStatusResponse, error)
	// Stream donation events (real-time notifications)
	StreamDonationEvents(*StreamDonationEventsRequest, grpc.ServerStreamingServer[DonationEvent]) error
	// Get donation statistics
	GetDonationStats(context.Context, *GetDonationStatsRequest) (*GetDonationStatsResponse, error)
	mustEmbedUnimplementedDonationServiceServer()
}

// UnimplementedDonationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDonationServiceServer struct{}

func (UnimplementedDonationServiceServer) CreateDonation(context.Context, *CreateDonationRequest) (*CreateDonationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDonation not implemented")
}
func (UnimplementedDonationServiceServer) GetDonation(context.Context, *GetDonationRequest) (*GetDonationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDonation not implemented")
}
func (UnimplementedDonationServiceServer) GetDonationsByStreamer(context.Context, *GetDonationsByStreamerRequest) (*GetDonationsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDonationsByStreamer not implemented")
}
func (UnimplementedDonationServiceServer) UpdateDonationStatus(context.Context, *UpdateDonationStatusRequest) (*UpdateDonationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDonationStatus not implemented")
}
func (UnimplementedDonationServiceServer) StreamDonationEvents(*StreamDonationEventsRequest, grpc.ServerStreamingServer[DonationEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamDonationEvents not implemented")
}
func (UnimplementedDonationServiceServer) GetDonationStats(context.Context, *GetDonationStatsRequest) (*GetDonationStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDonationStats not implemented")
}
func (UnimplementedDonationServiceServer) mustEmbedUnimplementedDonationServiceServer() {}
func (UnimplementedDonationServiceServer) testEmbeddedByValue()                         {}

// UnsafeDonationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DonationServiceServer will
// result in compilation errors.
type UnsafeDonationServiceServer interface {
	mustEmbedUnimplementedDonationServiceServer()
}

func RegisterDonationServiceServer(s grpc.ServiceRegistrar, srv DonationServiceServer) {
	// If the following call pancis, it indicates UnimplementedDonationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DonationService_ServiceDesc, srv)
}

func _DonationService_CreateDonation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDonationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationServiceServer).CreateDonation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationService_CreateDonation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationServiceServer).CreateDonation(ctx, req.(*CreateDonationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonationService_GetDonation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDonationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationServiceServer).GetDonation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationService_GetDonation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationServiceServer).GetDonation(ctx, req.(*GetDonationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonationService_GetDonationsByStreamer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDonationsByStreamerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationServiceServer).GetDonationsByStreamer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationService_GetDonationsByStreamer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationServiceServer).GetDonationsByStreamer(ctx, req.(*GetDonationsByStreamerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonationService_UpdateDonationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDonationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationServiceServer).UpdateDonationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationService_UpdateDonationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationServiceServer).UpdateDonationStatus(ctx, req.(*UpdateDonationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonationService_StreamDonationEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDonationEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DonationServiceServer).StreamDonationEvents(m, &grpc.GenericServerStream[StreamDonationEventsRequest, DonationEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DonationService_StreamDonationEventsServer = grpc.ServerStreamingServer[DonationEvent]

func _DonationService_GetDonationStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDonationStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationServiceServer).GetDonationStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationService_GetDonationStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationServiceServer).GetDonationStats(ctx, req.(*GetDonationStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DonationService_ServiceDesc is the grpc.ServiceDesc for DonationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DonationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "donation.DonationService",
	HandlerType: (*DonationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDonation",
			Handler:    _DonationService_CreateDonation_Handler,
		},
		{
			MethodName: "GetDonation",
			Handler:    _DonationService_GetDonation_Handler,
		},
		{
			MethodName: "GetDonationsByStreamer",
			Handler:    _DonationService_GetDonationsByStreamer_Handler,
		},
		{
			MethodName: "UpdateDonationStatus",
			Handler:    _DonationService_UpdateDonationStatus_Handler,
		},
		{
			MethodName: "GetDonationStats",
			Handler:    _DonationService_GetDonationStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamDonationEvents",
			Handler:       _DonationService_StreamDonationEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/donation.proto",
}

const (
	PaymentService_ProcessPayment_FullMethodName = "/donation.PaymentService/ProcessPayment"
	PaymentService_VerifyPayment_FullMethodName  = "/donation.PaymentService/VerifyPayment"
	PaymentService_HandleWebhook_FullMethodName  = "/donation.PaymentService/HandleWebhook"
)

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Payment service definition for microservices
type PaymentServiceClient interface {
	// Process payment for donation
	ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error)
	// Verify payment status
	VerifyPayment(ctx context.Context, in *VerifyPaymentRequest, opts ...grpc.CallOption) (*VerifyPaymentResponse, error)
	// Handle payment webhook
	HandleWebhook(ctx context.Context, in *HandleWebhookRequest, opts ...grpc.CallOption) (*HandleWebhookResponse, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessPaymentResponse)
	err := c.cc.Invoke(ctx, PaymentService_ProcessPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) VerifyPayment(ctx context.Context, in *VerifyPaymentRequest, opts ...grpc.CallOption) (*VerifyPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyPaymentResponse)
	err := c.cc.Invoke(ctx, PaymentService_VerifyPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) HandleWebhook(ctx context.Context, in *HandleWebhookRequest, opts ...grpc.CallOption) (*HandleWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleWebhookResponse)
	err := c.cc.Invoke(ctx, PaymentService_HandleWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility.
//
// Payment service definition for microservices
type PaymentServiceServer interface {
	// Process payment for donation
	ProcessPayment(context.Context, *ProcessPaymentRequest) (*ProcessPaymentResponse, error)
	// Verify payment status
	VerifyPayment(context.Context, *VerifyPaymentRequest) (*VerifyPaymentResponse, error)
	// Handle payment webhook
	HandleWebhook(context.Context, *HandleWebhookRequest) (*HandleWebhookResponse, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentServiceServer struct{}

func (UnimplementedPaymentServiceServer) ProcessPayment(context.Context, *ProcessPaymentRequest) (*ProcessPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPayment not implemented")
}
func (UnimplementedPaymentServiceServer) VerifyPayment(context.Context, *VerifyPaymentRequest) (*VerifyPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPayment not implemented")
}
func (UnimplementedPaymentServiceServer) HandleWebhook(context.Context, *HandleWebhookRequest) (*HandleWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleWebhook not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}
func (UnimplementedPaymentServiceServer) testEmbeddedByValue()                        {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_ProcessPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ProcessPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_ProcessPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ProcessPayment(ctx, req.(*ProcessPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_VerifyPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).VerifyPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_VerifyPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).VerifyPayment(ctx, req.(*VerifyPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_HandleWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).HandleWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_HandleWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).HandleWebhook(ctx, req.(*HandleWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "donation.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessPayment",
			Handler:    _PaymentService_ProcessPayment_Handler,
		},
		{
			MethodName: "VerifyPayment",
			Handler:    _PaymentService_VerifyPayment_Handler,
		},
		{
			MethodName: "HandleWebhook",
			Handler:    _PaymentService_HandleWebhook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/donation.proto",
}

const (
	NotificationService_SendDonationNotification_FullMethodName = "/donation.NotificationService/SendDonationNotification"
	NotificationService_SubscribeDonationEvents_FullMethodName  = "/donation.NotificationService/SubscribeDonationEvents"
)

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Notification service for real-time updates
type NotificationServiceClient interface {
	// Send donation notification
	SendDonationNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error)
	// Subscribe to donation events
	SubscribeDonationEvents(ctx context.Context, in *SubscribeEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DonationEvent], error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) SendDonationNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendDonationNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SubscribeDonationEvents(ctx context.Context, in *SubscribeEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DonationEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NotificationService_ServiceDesc.Streams[0], NotificationService_SubscribeDonationEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeEventsRequest, DonationEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotificationService_SubscribeDonationEventsClient = grpc.ServerStreamingClient[DonationEvent]

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility.
//
// Notification service for real-time updates
type NotificationServiceServer interface {
	// Send donation notification
	SendDonationNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error)
	// Subscribe to donation events
	SubscribeDonationEvents(*SubscribeEventsRequest, grpc.ServerStreamingServer[DonationEvent]) error
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationServiceServer struct{}

func (UnimplementedNotificationServiceServer) SendDonationNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDonationNotification not implemented")
}
func (UnimplementedNotificationServiceServer) SubscribeDonationEvents(*SubscribeEventsRequest, grpc.ServerStreamingServer[DonationEvent]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeDonationEvents not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}
func (UnimplementedNotificationServiceServer) testEmbeddedByValue()                             {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_SendDonationNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendDonationNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendDonationNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendDonationNotification(ctx, req.(*SendNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SubscribeDonationEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationServiceServer).SubscribeDonationEvents(m, &grpc.GenericServerStream[SubscribeEventsRequest, DonationEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotificationService_SubscribeDonationEventsServer = grpc.ServerStreamingServer[DonationEvent]

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "donation.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendDonationNotification",
			Handler:    _NotificationService_SendDonationNotification_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeDonationEvents",
			Handler:       _NotificationService_SubscribeDonationEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/donation.proto",
}
