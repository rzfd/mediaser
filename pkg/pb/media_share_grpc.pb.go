// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/media_share.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MediaShareService_GetSettings_FullMethodName      = "/mediashar.media_share.MediaShareService/GetSettings"
	MediaShareService_UpdateSettings_FullMethodName   = "/mediashar.media_share.MediaShareService/UpdateSettings"
	MediaShareService_SubmitMediaShare_FullMethodName = "/mediashar.media_share.MediaShareService/SubmitMediaShare"
	MediaShareService_GetMediaQueue_FullMethodName    = "/mediashar.media_share.MediaShareService/GetMediaQueue"
	MediaShareService_GetMediaStats_FullMethodName    = "/mediashar.media_share.MediaShareService/GetMediaStats"
	MediaShareService_ApproveMedia_FullMethodName     = "/mediashar.media_share.MediaShareService/ApproveMedia"
	MediaShareService_RejectMedia_FullMethodName      = "/mediashar.media_share.MediaShareService/RejectMedia"
	MediaShareService_StreamMediaQueue_FullMethodName = "/mediashar.media_share.MediaShareService/StreamMediaQueue"
)

// MediaShareServiceClient is the client API for MediaShareService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Media Share Service
type MediaShareServiceClient interface {
	// Settings management
	GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error)
	UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsResponse, error)
	// Media share operations
	SubmitMediaShare(ctx context.Context, in *SubmitMediaShareRequest, opts ...grpc.CallOption) (*SubmitMediaShareResponse, error)
	GetMediaQueue(ctx context.Context, in *GetMediaQueueRequest, opts ...grpc.CallOption) (*GetMediaQueueResponse, error)
	GetMediaStats(ctx context.Context, in *GetMediaStatsRequest, opts ...grpc.CallOption) (*GetMediaStatsResponse, error)
	// Media management
	ApproveMedia(ctx context.Context, in *ApproveMediaRequest, opts ...grpc.CallOption) (*ApproveMediaResponse, error)
	RejectMedia(ctx context.Context, in *RejectMediaRequest, opts ...grpc.CallOption) (*RejectMediaResponse, error)
	// Real-time streaming
	StreamMediaQueue(ctx context.Context, in *StreamMediaQueueRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MediaQueueUpdate], error)
}

type mediaShareServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaShareServiceClient(cc grpc.ClientConnInterface) MediaShareServiceClient {
	return &mediaShareServiceClient{cc}
}

func (c *mediaShareServiceClient) GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSettingsResponse)
	err := c.cc.Invoke(ctx, MediaShareService_GetSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaShareServiceClient) UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSettingsResponse)
	err := c.cc.Invoke(ctx, MediaShareService_UpdateSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaShareServiceClient) SubmitMediaShare(ctx context.Context, in *SubmitMediaShareRequest, opts ...grpc.CallOption) (*SubmitMediaShareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitMediaShareResponse)
	err := c.cc.Invoke(ctx, MediaShareService_SubmitMediaShare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaShareServiceClient) GetMediaQueue(ctx context.Context, in *GetMediaQueueRequest, opts ...grpc.CallOption) (*GetMediaQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMediaQueueResponse)
	err := c.cc.Invoke(ctx, MediaShareService_GetMediaQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaShareServiceClient) GetMediaStats(ctx context.Context, in *GetMediaStatsRequest, opts ...grpc.CallOption) (*GetMediaStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMediaStatsResponse)
	err := c.cc.Invoke(ctx, MediaShareService_GetMediaStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaShareServiceClient) ApproveMedia(ctx context.Context, in *ApproveMediaRequest, opts ...grpc.CallOption) (*ApproveMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveMediaResponse)
	err := c.cc.Invoke(ctx, MediaShareService_ApproveMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaShareServiceClient) RejectMedia(ctx context.Context, in *RejectMediaRequest, opts ...grpc.CallOption) (*RejectMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectMediaResponse)
	err := c.cc.Invoke(ctx, MediaShareService_RejectMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaShareServiceClient) StreamMediaQueue(ctx context.Context, in *StreamMediaQueueRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MediaQueueUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MediaShareService_ServiceDesc.Streams[0], MediaShareService_StreamMediaQueue_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamMediaQueueRequest, MediaQueueUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MediaShareService_StreamMediaQueueClient = grpc.ServerStreamingClient[MediaQueueUpdate]

// MediaShareServiceServer is the server API for MediaShareService service.
// All implementations must embed UnimplementedMediaShareServiceServer
// for forward compatibility.
//
// Media Share Service
type MediaShareServiceServer interface {
	// Settings management
	GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error)
	UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error)
	// Media share operations
	SubmitMediaShare(context.Context, *SubmitMediaShareRequest) (*SubmitMediaShareResponse, error)
	GetMediaQueue(context.Context, *GetMediaQueueRequest) (*GetMediaQueueResponse, error)
	GetMediaStats(context.Context, *GetMediaStatsRequest) (*GetMediaStatsResponse, error)
	// Media management
	ApproveMedia(context.Context, *ApproveMediaRequest) (*ApproveMediaResponse, error)
	RejectMedia(context.Context, *RejectMediaRequest) (*RejectMediaResponse, error)
	// Real-time streaming
	StreamMediaQueue(*StreamMediaQueueRequest, grpc.ServerStreamingServer[MediaQueueUpdate]) error
	mustEmbedUnimplementedMediaShareServiceServer()
}

// UnimplementedMediaShareServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMediaShareServiceServer struct{}

func (UnimplementedMediaShareServiceServer) GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedMediaShareServiceServer) UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettings not implemented")
}
func (UnimplementedMediaShareServiceServer) SubmitMediaShare(context.Context, *SubmitMediaShareRequest) (*SubmitMediaShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitMediaShare not implemented")
}
func (UnimplementedMediaShareServiceServer) GetMediaQueue(context.Context, *GetMediaQueueRequest) (*GetMediaQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaQueue not implemented")
}
func (UnimplementedMediaShareServiceServer) GetMediaStats(context.Context, *GetMediaStatsRequest) (*GetMediaStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaStats not implemented")
}
func (UnimplementedMediaShareServiceServer) ApproveMedia(context.Context, *ApproveMediaRequest) (*ApproveMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveMedia not implemented")
}
func (UnimplementedMediaShareServiceServer) RejectMedia(context.Context, *RejectMediaRequest) (*RejectMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectMedia not implemented")
}
func (UnimplementedMediaShareServiceServer) StreamMediaQueue(*StreamMediaQueueRequest, grpc.ServerStreamingServer[MediaQueueUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMediaQueue not implemented")
}
func (UnimplementedMediaShareServiceServer) mustEmbedUnimplementedMediaShareServiceServer() {}
func (UnimplementedMediaShareServiceServer) testEmbeddedByValue()                           {}

// UnsafeMediaShareServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaShareServiceServer will
// result in compilation errors.
type UnsafeMediaShareServiceServer interface {
	mustEmbedUnimplementedMediaShareServiceServer()
}

func RegisterMediaShareServiceServer(s grpc.ServiceRegistrar, srv MediaShareServiceServer) {
	// If the following call pancis, it indicates UnimplementedMediaShareServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MediaShareService_ServiceDesc, srv)
}

func _MediaShareService_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaShareServiceServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaShareService_GetSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaShareServiceServer).GetSettings(ctx, req.(*GetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaShareService_UpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaShareServiceServer).UpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaShareService_UpdateSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaShareServiceServer).UpdateSettings(ctx, req.(*UpdateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaShareService_SubmitMediaShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitMediaShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaShareServiceServer).SubmitMediaShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaShareService_SubmitMediaShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaShareServiceServer).SubmitMediaShare(ctx, req.(*SubmitMediaShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaShareService_GetMediaQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaShareServiceServer).GetMediaQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaShareService_GetMediaQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaShareServiceServer).GetMediaQueue(ctx, req.(*GetMediaQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaShareService_GetMediaStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaShareServiceServer).GetMediaStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaShareService_GetMediaStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaShareServiceServer).GetMediaStats(ctx, req.(*GetMediaStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaShareService_ApproveMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaShareServiceServer).ApproveMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaShareService_ApproveMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaShareServiceServer).ApproveMedia(ctx, req.(*ApproveMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaShareService_RejectMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaShareServiceServer).RejectMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaShareService_RejectMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaShareServiceServer).RejectMedia(ctx, req.(*RejectMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaShareService_StreamMediaQueue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMediaQueueRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MediaShareServiceServer).StreamMediaQueue(m, &grpc.GenericServerStream[StreamMediaQueueRequest, MediaQueueUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MediaShareService_StreamMediaQueueServer = grpc.ServerStreamingServer[MediaQueueUpdate]

// MediaShareService_ServiceDesc is the grpc.ServiceDesc for MediaShareService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaShareService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediashar.media_share.MediaShareService",
	HandlerType: (*MediaShareServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSettings",
			Handler:    _MediaShareService_GetSettings_Handler,
		},
		{
			MethodName: "UpdateSettings",
			Handler:    _MediaShareService_UpdateSettings_Handler,
		},
		{
			MethodName: "SubmitMediaShare",
			Handler:    _MediaShareService_SubmitMediaShare_Handler,
		},
		{
			MethodName: "GetMediaQueue",
			Handler:    _MediaShareService_GetMediaQueue_Handler,
		},
		{
			MethodName: "GetMediaStats",
			Handler:    _MediaShareService_GetMediaStats_Handler,
		},
		{
			MethodName: "ApproveMedia",
			Handler:    _MediaShareService_ApproveMedia_Handler,
		},
		{
			MethodName: "RejectMedia",
			Handler:    _MediaShareService_RejectMedia_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMediaQueue",
			Handler:       _MediaShareService_StreamMediaQueue_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/media_share.proto",
}
